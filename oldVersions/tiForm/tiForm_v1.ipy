'''
tiForm.py
ohm sensor
Author: miles @ hyperlightcorp.com
Created: 2022-04-21
Modified: 2022-04-21

formats calculated columns into a nice grid.  will eventually be implemented
entirely in tiToCsv.py as a function
'''
import re
import numpy as np
import matplotlib.pyplot as plt
%matplotlib notebook

def tiForm(pathe):
  
  typeArr = {}
  contentArr = {}
  
  pathe = re.sub(r'\\','/',pathe)
  if 0: #debugging_if
    print(pathe + '\n' + newPathe)
  
  tiFile = open(pathe, "r")
  for line in tiFile:
    if not(line.isspace()):
      line = line.strip()
      lineList = re.split('\t+',line)
      if not(line[0][0].isnumeric()):
        headList = lineList
      if line[0][0].isnumeric():
        for linePos in range(1,len(lineList)):
          hllp = headList[linePos] # heading retrieved from the last non-
                                   # ... numeric line
          LLLp = lineList[linePos] # data corresponding to the heading at hllp
          if not(hllp in contentArr.keys()) \
             or (contentArr[hllp] is None):
            if 0: #debugging_if
              print("contentarr:\t\t\t",contentArr)
              print("headList[linePos]: ",hllp)
              print("headList: ",headList)
            contentArr[hllp] = np.array([float(lineList[0]), float(LLLp)])
            if 0: #debugging_if
              print(contentArr[hllp],hllp)
          else:
            if 0: #debugging_if
              print("lineList[linePos]:\t\t\t",LLLp)
            contentArr[hllp] = np.vstack((contentArr[hllp],\
                                          [float(lineList[0]), float(LLLp)]))
          
  tiFile.close()
  return contentArr
''' fix this
def AxScale(whichArray, numTicks):
  if type(whichArray) is np.ndarray:
    return np.arange(0.9 * np.amin(whichArray), 1.1 * np.amax(whichArray), 1/numTicks)
  else:
    return (whichArray * (0.9 * min(whichArray),\
                          1.1 * max(whichArray),\
                          1/numTicks))
'''
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~main~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
if __name__ == "__main__":
  
  from datetime import datetime
  
  #User Set Block~~~~~~~~~~~~~~~~~~
  numTicksX = 11
  numTicksY = 16
  
  customMinX = 0
  customMinY = 0
  customXlabel = 1 #set to 0 to automatically label axis "Time (s)"
                   #set to 1 to prompt user for X labels
  
  saveMode = 0
  
  if 1: #debugging_if
    pathe = input("path to file:\n").strip("\"")
  else:
    pathe = r"C:\Users\miles.HYPERLIGHT\Documents\ohmSensor\dr_prelim_nodr_t.txt"
  pathe = re.sub(r'\\','/',pathe)
  newPathe = re.sub('txt','csv',pathe)
  patheStart = pathe.rsplit('/',1)[0] + "/"
  patheEnd = pathe.rsplit('/',1)[1]
  patheEnd = re.sub('.txt','',patheEnd)
  if 0: #debugging_if
    print(pathe + '\n' + newPathe)
    
  allData = tiForm(pathe)
  if 0:
    allData = {key: value for key, value in sorted(allData.items())}
    # ^ don't need to do this, but its kind of nice to have here
  
  
  plottedParams = []
  plotsMade = {}
  paramLeg = []
  Xbounds = [customMinX,customMinX]
  Ybounds = [customMinY,customMinY]
  if customXlabel == 0:
    xLab = "Time (s)"
  else:
    xLab = input("Enter X Label:\n")
    
  for param in allData.keys():
    #if not(param[0] in plottedParams):
    if (len(plottedParams) == 0) or (param[0] != plottedParams[-1]):
      if (len(plottedParams) != 0):
        paramLeg = []
        onePlot.grid(True)
        onePlot.set_yticks(np.linspace(Ybounds[0],Ybounds[1],numTicksY))
        onePlot.set_xticks(np.linspace(Xbounds[0],Xbounds[1],numTicksX))
        Xbounds = [np.amin(allData[param][:,0]),np.amax(allData[param][:,0])]
        Ybounds = [np.amin(allData[param][:,1]),np.amax(allData[param][:,1])]
      
        Xbounds = [min(np.amin(allData[param][:,0]),customMinX),\
                   np.amax(allData[param][:,0]) * 1.1]
        Ybounds = [min(np.amin(allData[param][:,1]),customMinY),\
                   np.amax(allData[param][:,1]) * 1.1]
      
      plottedParams.append(param[0])
      plotsMade[param[0]] = plt.figure(figsize=(11,8.5))
      onePlot = plotsMade[param[0]].add_subplot()
      onePlot.set_xlabel(xLab)
      onePlot.set_ylabel(param[0])
      
    Xbounds = [min(np.amin(allData[param][:,0]),Xbounds[0]),\
               max(np.amax(allData[param][:,0]),Xbounds[1])]
    Ybounds = [min(np.amin(allData[param][:,1]),Ybounds[0]),\
               max(np.amax(allData[param][:,1]),Ybounds[1])]
    paramLeg.append(param)
    onePlot.plot(allData[param][:,0],allData[param][:,1])
    onePlot.legend(paramLeg)
    
    if 0: #debgging_if
      print(allData[param][:,0],allData[param][:,1])
    
  onePlot.legend(paramLeg)
  onePlot.grid(True)
  onePlot.set_yticks(np.linspace(Ybounds[0],Ybounds[1],numTicksY))
  onePlot.set_xticks(np.linspace(Xbounds[0],Xbounds[1],numTicksX))
  if 0: #debugging_if
    print(allData)
  
if saveMode:
  nowe = datetime.now()
  realNow = datetime.strftime(nowe,"%Y%m%d%H%M")
  for plotItem in plottedParams:
    plotsMade[plotItem].savefig(patheStart + patheEnd + "_" + plotItem + \
                                "_" + realNow + ".png")
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  